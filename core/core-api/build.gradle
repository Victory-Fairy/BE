ext {
    SERVICE = "api"
}

bootJar {
    enabled = true

    /*doLast {
        // JAR 파일을 .deploy 디렉토리로 복사
        copy {
            from "${buildDir}/libs/core-${SERVICE}.jar"
            into "${rootDir}/.deploy"
        }

        // deploy.sh 실행
        exec {
            workingDir "${rootDir}/.deploy"
            commandLine "sh", "deploy.sh", "${SERVICE}"
        }
    }*/
    doLast {
        // JAR -> .deploy 로 복사 (이건 유지)
        copy {
            from "${buildDir}/libs/core-${SERVICE}.jar"
            into "${rootDir}/.deploy"
        }

        // ❌ Jenkins에서 이미 Docker 빌드/푸시 하므로, 로컬에서만 실행되도록 가드
        if (!project.hasProperty('ci')) {
            exec {
                workingDir "${rootDir}/.deploy"
                commandLine "sh", "deploy.sh", "${SERVICE}"
            }
        }
    }
}

jar.enabled = false

dependencies {
    implementation project(":core:core-enum")
    implementation project(":support:logging")
    implementation project(":support:common")
    implementation project(":support:redis")
    implementation project(":storage:db-core")

    testImplementation project(":tests:api-docs")
    
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.springdoc:springdoc-openapi-starter-webmvc-ui:2.3.0'

    compileOnly 'org.projectlombok:lombok'
    annotationProcessor 'org.projectlombok:lombok'

    implementation 'io.jsonwebtoken:jjwt-api:0.11.2'
    runtimeOnly 'io.jsonwebtoken:jjwt-impl:0.11.2', 'io.jsonwebtoken:jjwt-jackson:0.11.2'

    implementation 'org.bouncycastle:bcprov-jdk18on:1.76'
    implementation 'org.bouncycastle:bcpkix-jdk18on:1.76'

    implementation 'com.google.code.gson:gson:2.9.0'
}